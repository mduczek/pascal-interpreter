module SkelVar where

-- Haskell module generated by the BNF converter

import AbsVar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog id recblock decblock functions stms  -> failure x


transFunction :: Function -> Result
transFunction x = case x of
  Fun id decls returntype decblock functions stms  -> failure x


transRecBlock :: RecBlock -> Result
transRecBlock x = case x of
  RecBlockJust records  -> failure x
  RecBlockEmpty  -> failure x


transRecord :: Record -> Result
transRecord x = case x of
  Rec id decls  -> failure x


transDecBlock :: DecBlock -> Result
transDecBlock x = case x of
  DecBlockJust decls  -> failure x
  DecBlockEmpty  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  Dec ids type'  -> failure x


transVar :: Var -> Result
transVar x = case x of
  VarSimple id  -> failure x
  VarIndexed var exp  -> failure x
  VarFieldAccess var id  -> failure x


transStm :: Stm -> Result
transStm x = case x of
  SComp stms  -> failure x
  SExp exp  -> failure x
  SWhile exp stm  -> failure x
  SFor exp1 exp2 exp3 stm4  -> failure x
  SIt exp stm elifs  -> failure x
  SIte exp stm1 elifs2 stm3  -> failure x
  SLength id exp  -> failure x


transElif :: Elif -> Result
transElif x = case x of
  Eliff exp stm  -> failure x


transReturnType :: ReturnType -> Result
transReturnType x = case x of
  RetType type'  -> failure x
  Void  -> failure x


transType :: Type -> Result
transType x = case x of
  TTuple type' types  -> failure x
  TBool  -> failure x
  TInt  -> failure x
  TString  -> failure x
  TArray type'  -> failure x
  TMap type'1 type'2  -> failure x
  TRecord id  -> failure x
  TWildcard  -> failure x


transAssignable :: Assignable -> Result
transAssignable x = case x of
  ATuple var vars  -> failure x
  AVar var  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAss assignable exp  -> failure x
  Eor exp1 exp2  -> failure x
  Eand exp1 exp2  -> failure x
  Eeq exp1 exp2  -> failure x
  Eneq exp1 exp2  -> failure x
  Elt exp1 exp2  -> failure x
  Elte exp1 exp2  -> failure x
  Egt exp1 exp2  -> failure x
  Egte exp1 exp2  -> failure x
  EConcat exp1 exp2  -> failure x
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  Call id exps  -> failure x
  ETuple exp exps  -> failure x
  EBNeg exp  -> failure x
  EMinus exp  -> failure x
  ECast exp type'  -> failure x
  EVar var  -> failure x
  EInt n  -> failure x
  Etrue  -> failure x
  Efalse  -> failure x
  EStr str  -> failure x



