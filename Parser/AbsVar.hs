module AbsVar where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Prog Ident RecBlock DecBlock [Function] [Stm]
  deriving (Eq,Ord,Show)

data Function =
   Fun Ident [Decl] ReturnType DecBlock [Function] [Stm]
  deriving (Eq,Ord,Show)

data RecBlock =
   RecBlockJust [Record]
 | RecBlockEmpty
  deriving (Eq,Ord,Show)

data Record =
   Rec Ident [Decl]
  deriving (Eq,Ord,Show)

data DecBlock =
   DecBlockJust [Decl]
 | DecBlockEmpty
  deriving (Eq,Ord,Show)

data Decl =
   Dec [Ident] Type
  deriving (Eq,Ord,Show)

data Var =
   VarSimple Ident
 | VarIndexed Var Exp
 | VarFieldAccess Var Ident
  deriving (Eq,Ord,Show)

data Stm =
   SComp [Stm]
 | SExp Exp
 | SWhile Exp Stm
 | SFor Exp Exp Exp Stm
 | SIt Exp Stm [Elif]
 | SIte Exp Stm [Elif] Stm
 | SLength Ident Exp
  deriving (Eq,Ord,Show)

data Elif =
   Eliff Exp Stm
  deriving (Eq,Ord,Show)

data ReturnType =
   RetType Type
 | Void
  deriving (Eq,Ord,Show)

data Type =
   TTuple Type [Type]
 | TBool
 | TInt
 | TString
 | TArray Type
 | TMap Type Type
 | TRecord Ident
 | TWildcard
  deriving (Eq,Ord,Show)

data Assignable =
   ATuple Var [Var]
 | AVar Var
  deriving (Eq,Ord,Show)

data Exp =
   EAss Assignable Exp
 | Eor Exp Exp
 | Eand Exp Exp
 | Eeq Exp Exp
 | Eneq Exp Exp
 | Elt Exp Exp
 | Elte Exp Exp
 | Egt Exp Exp
 | Egte Exp Exp
 | EConcat Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | Call Ident [Exp]
 | ETuple Exp [Exp]
 | EBNeg Exp
 | EMinus Exp
 | ECast Exp Type
 | EVar Var
 | EInt Integer
 | Etrue
 | Efalse
 | EStr String
  deriving (Eq,Ord,Show)

